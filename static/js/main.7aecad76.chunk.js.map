{"version":3,"sources":["index.tsx"],"names":["App","useState","text","setText","todos","setTodos","filter","setFilter","translatedFilter","arg","filteredTodos","todo","removed","checked","useEffect","document","title","className","onClick","id","labelId","label","value","onChange","event","target","onSubmit","e","preventDefault","newTodo","Date","getTime","handleOnSubmit","variant","disabled","type","size","style","verticalAlign","length","newTodos","handleOnEmpty","map","handleOnCheck","handleOnEdit","handleOnDelete","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7aecad76.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport './style.css';\n\ninterface Todo {\n    value: string;\n    id: number;\n    checked: boolean;\n    removed: boolean;\n}\n\ntype Filter = 'all' | 'checked' | 'unchecked' | 'removed';\n\nconst App: React.VFC = () => {\n    const [text, setText] = useState('')\n    const [todos, setTodos] = useState<Todo[]>([])\n    const [filter, setFilter] = useState<Filter>('all')\n    const translatedFilter = (arg: Filter) => {\n        switch (arg) {\n            case 'all':\n                return '全てのタスク';\n            case 'checked':\n                return '完了済みのタスク';\n            case 'unchecked':\n                return '現在のタスク';\n            case 'removed':\n                return 'ごみ箱';\n            default:\n                return 'TODO';\n        }\n    }\n    const filteredTodos = todos.filter(todo => {\n        switch (filter) {\n            case 'all':\n                return !todo.removed;\n            case 'checked':\n                return todo.checked && !todo.removed;\n            case 'unchecked':\n                return !todo.checked && !todo.removed;\n            case 'removed':\n                return todo.removed;\n            default:\n                return todo;\n        }\n    })\n    const handleChange = (event: SelectChangeEvent) => {\n        setFilter(event.target.value as Filter);\n    }\n    const handleOnSubmit = (e: React.FormEvent<HTMLFormElement | HTMLInputElement>) => {\n        e.preventDefault()\n        if (!text) return\n        const newTodo: Todo = {\n            value: text,\n            id: new Date().getTime(),\n            checked: false,\n            removed: false,\n        }\n        // スプレッド構文を用いて todos ステートのコピーへ newTodo を追加する\n        // 以下と同義\n        // const oldTodos = todos.slice()\n        // setTodos(oldTodos.splice(0, 0, newTodo))\n        setTodos([newTodo, ...todos])\n        setText('')\n    }\n    const handleOnEdit = (id: number, value: string) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.value = value\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnCheck = (id: number, checked: boolean) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.checked = !checked\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnDelete = (id: number, removed: boolean) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.removed = !removed;\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnEmpty = () => {\n        const newTodos = todos.filter(todo => {\n            return !todo.removed\n        })\n        setTodos(newTodos)\n    }\n    const reset = () => {\n        setText('')\n        setTodos([])\n        setFilter('all')\n    }\n    useEffect(() => {\n        document.title = `TODO: ${translatedFilter(filter)}`\n    }, [filter])\n\n    return (\n        <div className='wrapper'>\n            <div className='header'>\n                <h2 onClick={() => reset()}>\n                    Todo\n                </h2>\n            </div>\n            <div className='filter_input'>\n                <FormControl>\n                    <InputLabel id=\"demo-simple-select-label\">Filter</InputLabel>\n                    <Select\n                        labelId=\"demo-simple-select-label\"\n                        id=\"demo-simple-select\"\n                        label=\"Todo\"\n                        value={filter}\n                        onChange={handleChange}\n                    >\n                        <MenuItem value=\"all\">{translatedFilter('all')}</MenuItem>\n                        <MenuItem value=\"checked\">{translatedFilter('checked')}</MenuItem>\n                        <MenuItem value=\"unchecked\">{translatedFilter('unchecked')}</MenuItem>\n                        <MenuItem value=\"removed\">{translatedFilter('removed')}</MenuItem>\n                    </Select>\n                </FormControl>\n                <div className='task_form'>\n                    <form onSubmit={(e) => handleOnSubmit(e)}>\n                        <TextField\n                            variant=\"standard\"\n                            label=\"タスクを追加する\"\n                            disabled={filter === 'checked'}\n                            value={text}\n                            onChange={(e) => setText(e.target.value)}\n                        />\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            size=\"small\"\n                            disabled={filter === 'checked'}\n                            style={{ verticalAlign: 'bottom' }}\n                        >\n                            追加\n                        </Button>\n                    </form>\n                </div>\n            </div>\n            {filter === 'removed' && (\n                <div className='garbage'>\n                    <Button\n                        variant=\"contained\"\n                        disabled={todos.filter(todo => todo.removed).length === 0}\n                        size=\"small\"\n                        onClick={() => handleOnEmpty()}\n                    >\n                        ゴミ箱を空にする\n                    </Button>\n                </div>\n            )}\n            <ul className=\"todos_list\">\n                <h4>{filter === 'removed' ? '削除済みタスク一覧' : 'タスク一覧'}：</h4>\n                {filteredTodos.map(todo => {\n                    return (\n                        <li key={todo.id}>\n                            <Checkbox\n                                disabled={todo.removed}\n                                checked={todo.checked}\n                                onChange={() => handleOnCheck(todo.id, todo.checked)} />\n                            <TextField\n                                variant=\"outlined\"\n                                disabled={todo.checked || todo.removed}\n                                value={todo.value}\n                                onChange={(e) => handleOnEdit(todo.id, e.target.value)}\n                                size=\"small\"\n                            />\n                            <Button\n                                type=\"submit\"\n                                variant=\"contained\"\n                                size=\"small\"\n                                onClick={() => handleOnDelete(todo.id, todo.removed)}\n                            >\n                                {todo.removed ? '復元' : '削除'}\n                            </Button>\n                        </li>\n                    )\n                })}\n            </ul>\n        </div >\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}