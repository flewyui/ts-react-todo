{"version":3,"sources":["index.tsx"],"names":["App","useState","text","setText","todos","setTodos","filter","setFilter","translatedFilter","arg","filteredTodos","todo","removed","checked","handleOnSubmit","e","preventDefault","newTodo","value","id","Date","getTime","useEffect","document","title","defaultValue","onChange","target","disabled","length","onClick","newTodos","handleOnEmpty","onSubmit","type","map","handleOnCheck","handleOnEdit","handleOnDelete","ReactDOM","render","getElementById"],"mappings":"mJAYMA,EAAiB,WACnB,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAiB,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA4BJ,mBAAiB,OAA7C,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAAmB,SAACC,GACtB,OAAQA,GACJ,IAAK,MACD,MAAO,uCACX,IAAK,UACD,MAAO,mDACX,IAAK,YACD,MAAO,uCACX,IAAK,UACD,MAAO,qBACX,QACI,MAAO,SAGbC,EAAgBN,EAAME,QAAO,SAAAK,GAC/B,OAAQL,GACJ,IAAK,MACD,OAAQK,EAAKC,QACjB,IAAK,UACD,OAAOD,EAAKE,UAAYF,EAAKC,QACjC,IAAK,YACD,OAAQD,EAAKE,UAAYF,EAAKC,QAClC,IAAK,UACD,OAAOD,EAAKC,QAChB,QACI,OAAOD,MAYbG,EAAiB,SAACC,GAEpB,GADAA,EAAEC,iBACGd,EAAL,CACA,IAAMe,EAAgB,CAClBC,MAAOhB,EACPiB,IAAI,IAAIC,MAAOC,UACfR,SAAS,EACTD,SAAS,GAMbP,EAAS,CAACY,GAAF,mBAAcb,KACtBD,EAAQ,MA8BZ,OAJAmB,qBAAU,WACNC,SAASC,MAAT,gBAA0BhB,EAAiBF,MAC5C,CAACA,IAGA,gCACI,8BACI,yBACImB,aAAa,MACbC,SAAU,SAACX,GAAD,OAAOR,EAAUQ,EAAEY,OAAOT,QAFxC,UAGI,wBAAQA,MAAM,MAAd,SAAqBV,EAAiB,SACtC,wBAAQU,MAAM,UAAd,SAAyBV,EAAiB,aAC1C,wBAAQU,MAAM,YAAd,SAA2BV,EAAiB,eAC5C,wBAAQU,MAAM,UAAd,SAAyBV,EAAiB,kBAGtC,YAAXF,EACG,8BACI,wBAAQsB,SAAwD,IAA9CxB,EAAME,QAAO,SAAAK,GAAI,OAAIA,EAAKC,WAASiB,OAAcC,QAAS,kBAxBtE,WAClB,IAAMC,EAAW3B,EAAME,QAAO,SAAAK,GAC1B,OAAQA,EAAKC,WAEjBP,EAAS0B,GAoBqFC,IAAlF,gEAGJ,uBAAMC,SAAU,SAAClB,GAAD,OAAOD,EAAeC,IAAtC,UACI,uBACImB,KAAK,OACLN,SAAqB,YAAXtB,EACVY,MAAOhB,EACPwB,SAAU,SAACX,GAAD,OAAOZ,EAAQY,EAAEY,OAAOT,UAEtC,uBACIgB,KAAK,SACLN,SAAqB,YAAXtB,EACVY,MAAM,eACNe,SAAU,SAAClB,GAAD,OAAOD,EAAeC,SAI5C,8BACI,6BACKL,EAAcyB,KAAI,SAAAxB,GACf,OACI,+BACI,uBACIuB,KAAK,WACLN,SAAUjB,EAAKC,QACfC,QAASF,EAAKE,QACda,SAAU,kBArEpB,SAACP,EAAYN,GAC/B,IAAMkB,EAAW3B,EAAM+B,KAAI,SAAAxB,GAIvB,OAHIA,EAAKQ,KAAOA,IACZR,EAAKE,SAAWA,GAEbF,KAEXN,EAAS0B,GA8DmCK,CAAczB,EAAKQ,GAAIR,EAAKE,YAEhD,uBACIqB,KAAK,OACLN,SAAUjB,EAAKE,SAAWF,EAAKC,QAC/BM,MAAOP,EAAKO,MACZQ,SAAU,SAACX,GAAD,OApGrB,SAACI,EAAYD,GAC9B,IAAMa,EAAW3B,EAAM+B,KAAI,SAAAxB,GAIvB,OAHIA,EAAKQ,KAAOA,IACZR,EAAKO,MAAQA,GAEVP,KAEXN,EAAS0B,GA6FoCM,CAAa1B,EAAKQ,GAAIJ,EAAEY,OAAOT,UAEpD,wBAAQY,QAAS,kBApEtB,SAACX,EAAYP,GAChC,IAAMmB,EAAW3B,EAAM+B,KAAI,SAAAxB,GAIvB,OAHIA,EAAKQ,KAAOA,IACZR,EAAKC,SAAWA,GAEbD,KAEXN,EAAS0B,GA6DsCO,CAAe3B,EAAKQ,GAAIR,EAAKC,UAApD,SACKD,EAAKC,QAAU,eAAO,mBAdtBD,EAAKQ,eAyB1CoB,IAASC,OAAO,cAACxC,EAAD,IAASuB,SAASkB,eAAe,W","file":"static/js/main.6094ff96.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Todo {\n    value: string;\n    id: number;\n    checked: boolean;\n    removed: boolean;\n}\n\ntype Filter = 'all' | 'checked' | 'unchecked' | 'removed';\n\nconst App: React.VFC = () => {\n    const [text, setText] = useState('')\n    const [todos, setTodos] = useState<Todo[]>([])\n    const [filter, setFilter] = useState<Filter>('all')\n    const translatedFilter = (arg: Filter) => {\n        switch (arg) {\n            case 'all':\n                return '全てのタスク';\n            case 'checked':\n                return '完了済みのタスク';\n            case 'unchecked':\n                return '現在のタスク';\n            case 'removed':\n                return 'ごみ箱';\n            default:\n                return 'TODO';\n        }\n    }\n    const filteredTodos = todos.filter(todo => {\n        switch (filter) {\n            case 'all':\n                return !todo.removed;\n            case 'checked':\n                return todo.checked && !todo.removed;\n            case 'unchecked':\n                return !todo.checked && !todo.removed;\n            case 'removed':\n                return todo.removed;\n            default:\n                return todo;\n        }\n    })\n    const handleOnEdit = (id: number, value: string) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.value = value\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnSubmit = (e: React.FormEvent<HTMLFormElement | HTMLInputElement>) => {\n        e.preventDefault()\n        if (!text) return\n        const newTodo: Todo = {\n            value: text,\n            id: new Date().getTime(),\n            checked: false,\n            removed: false,\n        }\n        // スプレッド構文を用いて todos ステートのコピーへ newTodo を追加する\n        // 以下と同義\n        // const oldTodos = todos.slice()\n        // setTodos(oldTodos.splice(0, 0, newTodo))\n        setTodos([newTodo, ...todos])\n        setText('')\n    }\n    const handleOnCheck = (id: number, checked: boolean) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.checked = !checked\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnDelete = (id: number, removed: boolean) => {\n        const newTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.removed = !removed;\n            }\n            return todo\n        })\n        setTodos(newTodos)\n    }\n    const handleOnEmpty = () => {\n        const newTodos = todos.filter(todo => {\n            return !todo.removed\n        })\n        setTodos(newTodos)\n    }\n    useEffect(() => {\n        document.title = `TODO: ${translatedFilter(filter)}`\n    }, [filter])\n\n    return (\n        <div>\n            <div>\n                <select\n                    defaultValue=\"all\"\n                    onChange={(e) => setFilter(e.target.value as Filter)}>\n                    <option value=\"all\">{translatedFilter('all')}</option>\n                    <option value=\"checked\">{translatedFilter('checked')}</option>\n                    <option value=\"unchecked\">{translatedFilter('unchecked')}</option>\n                    <option value=\"removed\">{translatedFilter('removed')}</option>\n                </select>\n            </div>\n            {filter === 'removed' ? (\n                <div>\n                    <button disabled={todos.filter(todo => todo.removed).length === 0} onClick={() => handleOnEmpty()}>ゴミ箱を空にする</button>\n                </div>\n            ) : (\n                <form onSubmit={(e) => handleOnSubmit(e)}>\n                    <input\n                        type=\"text\"\n                        disabled={filter === 'checked'}\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                    />\n                    <input\n                        type=\"submit\"\n                        disabled={filter === 'checked'}\n                        value=\"追加\"\n                        onSubmit={(e) => handleOnSubmit(e)}\n                    />\n                </form>\n            )}\n            <div>\n                <ul>\n                    {filteredTodos.map(todo => {\n                        return (\n                            <li key={todo.id}>\n                                <input\n                                    type=\"checkbox\"\n                                    disabled={todo.removed}\n                                    checked={todo.checked}\n                                    onChange={() => handleOnCheck(todo.id, todo.checked)}\n                                />\n                                <input\n                                    type=\"text\"\n                                    disabled={todo.checked || todo.removed}\n                                    value={todo.value}\n                                    onChange={(e) => handleOnEdit(todo.id, e.target.value)}\n                                />\n                                <button onClick={() => handleOnDelete(todo.id, todo.removed)}>\n                                    {todo.removed ? '復元' : '削除'}\n                                </button>\n                            </li>\n                        )\n                    })}\n                </ul>\n            </div>\n        </div >\n    );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}